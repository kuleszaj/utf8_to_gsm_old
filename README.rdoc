= utf8_to_gsm

== NOTICE:

This is part of an early attempt to create a gem which never was actually created. The code itself was for a specific bit of tricky problem solving. It is not maintained.

* http://github.com/kuleszaj/utf8_to_gsm

== DESCRIPTION:

The utf8_to_gsm gem provides functionality to convert UTF-8 characters to their GSM equivalents.

== FEATURES/PROBLEMS:

* The utf8_to_gsm gem provides functionality to convert UTF-8 characters (in a string) to their GSM equivalents for sending SMS messages via SMPP.
* Additionally, any given UTF-8 characters which do not exist in the GSM alphabet are transliterated (with the help of 'unidecoder') to the closest possible ASCII character.
* This library may be useful for people who need to send SMS messages via SMPP directly to an SMSC using the GSM-7 encoding ("Default SMSC Alphabet"), data_coding = 0x00.
* Transliteration was chosen to provide the closest possible displayable character using GSM. Otherwise, most characters would simply not be displayed, or appear as "?" on mobile phones.
* 'unidecoder' is used so that this library can work with Ruby 1.8.7. Much of the functionality of 'unidecoder' is provided by Ruby 1.9.2.  However... the need at the time of writing was Ruby 1.8.7.

== SYNOPSIS:

  require 'utf8_to_gsm'

  Utf8ToGsm.to_gsm('Convert to GSM: !@#$%^&*()')
  => "Convert to GSM: !\x00#\x02%\e\x14&*()" 


== REQUIREMENTS:

* unidecoder (>= 1.1.1)

== INSTALL:

* gem install utf8_to_gsm

== WARNING:

Transliteration used by this library is meant to provide the best possible ASCII replacement which is available for the given UTF-8 characters. It may be helpful to review the readme from the 'unicoder' gem which is utilized by this gem (https://github.com/norman/unidecoder/blob/master/README.md).

Clearly, this is not ideal.  However, the GSM-7 default alphabet ("Default SMSC Alphabet") only allows a total of 127 characters, and so a very limited repertoire is available.

It is presumed that providing the closest possible replacement is better than providing nothing at all.

For example, if a user tries to send an SMS message via SMPP containing the character "À", there is a problem.  "À" does not exist in the GSM-7 default alphabet. Sending "A" as a replacement instead of "?" is probably more helpful to the recipient.

For a truely accurate representation, UTF-16 or UCS-2 should generally be used for transmitting the payload of an SMPP PDU to the SMSC when non-GSM characters are being communicated.  However, not all telcos or SMSC's support UTF-16/UCS-16.

Theoretically, GSM locking shift tables and GSM single shift tables should be usable to represent characters outside of the GSM-7 default alphabet.  However, it seems that telco support for this (especially via SMPP) is very limited.

== LICENSE:

(The MIT License)

Copyright (c) 2011 Justin Kulesza

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
